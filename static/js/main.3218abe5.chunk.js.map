{"version":3,"sources":["components/title.js","components/description.js","components/button.js","components/board.js","components/select.js","components/range-input.js","components/label.js","App.js","serviceWorker.js","index.js"],"names":["Title","text","Description","split","map","index","Fragment","key","defaultProps","Button","value","onClick","className","type","e","target","blur","Board","ROWS","COLS","rows","r","cols","c","col","id","push","row","Select","options","player","onChange","option","RangeInput","min","max","step","defaultValue","Label","OPTIONS","App","props","selectPlayer","setState","p1","selectedIndex","runAI","p2","updateAISpeed","aiSpeed","Number","setNewGame","board","Array","fill","curPlayer","winner","button","document","getElementById","classList","remove","handlePlayerClick","state","dropDisc","getDropRow","add","nextBoard","checkWin","isBoardFull","win","i","leftBound","rightBound","topBound","bottomBound","checkWinHelper","newRightBound","incrementRow","incrementCol","invertRow","invertCol","offset","clearTimeout","timer","setTimeout","randomAI","minimaxAI","qLearningAI","tf","validMoves","this","getValidMoves","Math","floor","random","length","depth","maxVal","NEGATIVE_INFINITY","maxCols","validRow","validCol","val","minimax","POSITIVE_INFINITY","randMaxCol","alpha","beta","maximizingPlayer","isGameOver","getHeuristic","minVal","countWindows","weightedSum","CONSECUTIVE_TO_WIN","targetCount","count","playerCount","emptyCount","slice","turnText","href","bannerColor","octoColor","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3218abe5.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Title = ({ text }) => {\r\n  return <h1>{text}</h1>;\r\n};\r\n\r\nTitle.propTypes = {\r\n  text: PropTypes.string\r\n};\r\n\r\nexport default Title;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Description = ({ text }) => {\r\n  const addLineBreaks = string =>\r\n    string.split(\"\\n\").map((text, index) => (\r\n      <React.Fragment key={`${text}-${index}`}>\r\n        {text}\r\n        <br />\r\n      </React.Fragment>\r\n    ));\r\n\r\n  return <h5>{addLineBreaks(text)}</h5>;\r\n};\r\n\r\nDescription.defaultProps = {\r\n  text: \"Default description\"\r\n};\r\n\r\nDescription.propTypes = {\r\n  text: PropTypes.string\r\n};\r\n\r\nexport default Description;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Button = ({ value, onClick }) => {\r\n  const handleOnClick = (e) => {\r\n    e.target.blur();\r\n    onClick();\r\n  };\r\n\r\n  return (\r\n    <button\r\n      className=\"btn btn-primary btn-lg\"\r\n      type=\"button\"\r\n      onClick={handleOnClick}\r\n    >\r\n      {value}\r\n    </button>\r\n  );\r\n};\r\n\r\nButton.propTypes = {\r\n  value: PropTypes.string,\r\n  onClick: PropTypes.func,\r\n};\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\n\r\nconst Board = ({ ROWS, COLS, onClick }) => {\r\n  const rows = [];\r\n  for (let r = 0; r < ROWS; r++) {\r\n    const cols = [];\r\n    for (let c = 0; c < COLS; c++) {\r\n      const col = (\r\n        <td key={r + \"-\" + c}>\r\n          <button\r\n            type=\"button\"\r\n            className=\"board-button\"\r\n            id={`button-${r}-${c}`}\r\n            onClick={() => onClick(c)}\r\n          ></button>\r\n        </td>\r\n      );\r\n      cols.push(col);\r\n    }\r\n    const row = <tr key={r}>{cols}</tr>;\r\n    rows.push(row);\r\n  }\r\n  return (\r\n    <div className=\"table-responsive\">\r\n      <table className=\"table\">\r\n        <tbody>{rows}</tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n","import React from \"react\";\r\n\r\nconst Select = ({ options, player, onChange }) => {\r\n  return (\r\n    <select onChange={onChange}>\r\n      {options.map((option) => {\r\n        return <option key={`p${player}-${option}`}>{option}</option>;\r\n      })}\r\n    </select>\r\n  );\r\n};\r\n\r\nexport default Select;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst RangeInput = ({ min, max, step, defaultValue, id, onChange }) => {\r\n  return (\r\n    <input\r\n      type=\"range\"\r\n      min={min}\r\n      max={max}\r\n      step={step}\r\n      defaultValue={defaultValue}\r\n      id={id}\r\n      onChange={onChange}\r\n    />\r\n  );\r\n};\r\n\r\nRangeInput.defaultProps = {\r\n  min: 0,\r\n  max: 1,\r\n  step: 1,\r\n  defaultValue: 0,\r\n  id: \"\"\r\n};\r\n\r\nRangeInput.propTypes = {\r\n  min: PropTypes.number,\r\n  max: PropTypes.number,\r\n  step: PropTypes.number,\r\n  defaultValue: PropTypes.number,\r\n  id: PropTypes.string,\r\n  onChange: PropTypes.func.isRequired\r\n};\r\n\r\nexport default RangeInput;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Label = ({ text, value }) => {\r\n  return (\r\n    <h5 className=\"text-break\">\r\n      {text}: {value}\r\n    </h5>\r\n  );\r\n};\r\n\r\nLabel.defaultProps = {\r\n  text: \"\",\r\n  value: 0\r\n};\r\n\r\nLabel.propTypes = {\r\n  text: PropTypes.string,\r\n  value: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\r\n};\r\n\r\nexport default Label;\r\n","import React, { Component } from \"react\";\r\nimport Title from \"./components/title\";\r\nimport Description from \"./components/description\";\r\nimport Button from \"./components/button\";\r\nimport GithubCorner from \"react-github-corner\";\r\nimport Board from \"./components/board\";\r\nimport Select from \"./components/select\";\r\nimport RangeInput from \"./components/range-input\";\r\nimport Label from \"./components/label\";\r\nimport * as tf from \"@tensorflow/tfjs\";\r\n\r\nconst ROWS = 6;\r\nconst COLS = 7;\r\nconst CONSECUTIVE_TO_WIN = 4;\r\nconst OPTIONS = [\r\n  \"Player\",\r\n  \"Very easy (random)\",\r\n  \"Easy (1-step minimax)\",\r\n  \"Normal (2-step minimax)\",\r\n  \"(WIP) Hard (Q-learning)\",\r\n  \"Very hard (4-step minimax)\",\r\n  \"Extreme (6-step minimax)\",\r\n];\r\nconst AI_SPEED = 100;\r\nconst MINIMAX_DEPTH_1 = 1;\r\nconst MINIMAX_DEPTH_2 = 2;\r\nconst MINIMAX_DEPTH_4 = 4;\r\nconst MINIMAX_DEPTH_6 = 6;\r\n\r\nconst SIMULATE = false;\r\nconst P1 = 1;\r\nconst P2 = 1;\r\nconst MATCHES = 20;\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      board: new Array(ROWS).fill(0).map(() => new Array(COLS).fill(0)),\r\n      curPlayer: 1,\r\n      winner: -1, // -1: game in progress, 0: draw, 1: player 1, 2: player 2\r\n      p1: 0,\r\n      p2: 0,\r\n      aiSpeed: 0.2,\r\n    };\r\n\r\n    tf.setBackend(\"cpu\");\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (SIMULATE) {\r\n      this.matches = MATCHES;\r\n      this.p1Wins = 0;\r\n      this.p2Wins = 0;\r\n      this.draws = 0;\r\n      this.setState({ p1: P1, p2: P2 }, () => this.runAI());\r\n    }\r\n  }\r\n\r\n  selectPlayer = (e, player) => {\r\n    if (player === 1) {\r\n      this.setState(\r\n        {\r\n          p1: e.target.selectedIndex,\r\n        },\r\n        () => this.runAI()\r\n      );\r\n    } else if (player === 2) {\r\n      this.setState(\r\n        {\r\n          p2: e.target.selectedIndex,\r\n        },\r\n        () => this.runAI()\r\n      );\r\n    }\r\n  };\r\n\r\n  updateAISpeed = (e) => {\r\n    this.setState(\r\n      {\r\n        aiSpeed: Number(e.target.value),\r\n      },\r\n      () => this.runAI()\r\n    );\r\n  };\r\n\r\n  setNewGame = () => {\r\n    // Reset board and choose random player to start\r\n    this.setState(\r\n      {\r\n        board: new Array(ROWS).fill(0).map(() => new Array(COLS).fill(0)),\r\n        curPlayer: 1,\r\n        winner: -1,\r\n      },\r\n      () => this.runAI()\r\n    );\r\n\r\n    // Reset board button styles\r\n    for (let row = 0; row < ROWS; row++) {\r\n      for (let col = 0; col < COLS; col++) {\r\n        const button = document.getElementById(`button-${row}-${col}`);\r\n        button.classList.remove(\"p1\");\r\n        button.classList.remove(\"p2\");\r\n        button.classList.remove(\"win\");\r\n      }\r\n    }\r\n  };\r\n\r\n  handlePlayerClick = (col) => {\r\n    // Don't allow player to drop disc when AI's turn\r\n    if (\r\n      (this.state.curPlayer === 1 && this.state.p1 === 0) ||\r\n      (this.state.curPlayer === 2 && this.state.p2 === 0)\r\n    ) {\r\n      this.dropDisc(col);\r\n    }\r\n  };\r\n\r\n  dropDisc = (col) => {\r\n    // Don't allow drop if game over\r\n    if (this.state.winner !== -1) {\r\n      return;\r\n    }\r\n\r\n    const row = this.getDropRow(this.state.board, col);\r\n\r\n    // Column is full\r\n    if (row === -1) {\r\n      return;\r\n    }\r\n\r\n    // Add player class to button to change style\r\n    const button = document.getElementById(`button-${row}-${col}`);\r\n    button.classList.add(`p${this.state.curPlayer}`);\r\n\r\n    // Copy board and drop disc\r\n    const board = this.nextBoard(\r\n      row,\r\n      col,\r\n      this.state.board,\r\n      this.state.curPlayer\r\n    );\r\n\r\n    // Win\r\n    let winner = -1;\r\n    if (this.checkWin(board, row, col)) {\r\n      winner = this.state.curPlayer;\r\n    } else if (this.isBoardFull(board)) {\r\n      // Draw\r\n      winner = 0;\r\n    }\r\n\r\n    // Update board and current player\r\n    this.setState(\r\n      {\r\n        board: board,\r\n        curPlayer: (this.state.curPlayer % 2) + 1,\r\n        winner: winner,\r\n      },\r\n      () => this.runAI()\r\n    );\r\n  };\r\n\r\n  checkWin = (board, row, col) => {\r\n    // 'win = checkWinHelper() || win' must be in that order or checkWinHelper() will not be called on all sliding windows\r\n    let win = false;\r\n\r\n    // Pivot on the placed disk\r\n    for (let i = 0; i < CONSECUTIVE_TO_WIN; i++) {\r\n      const leftBound = col - i;\r\n      const rightBound = col + CONSECUTIVE_TO_WIN - i - 1;\r\n      const topBound = row - i;\r\n      const bottomBound = row + CONSECUTIVE_TO_WIN - i - 1;\r\n\r\n      // Horizontal, right to left\r\n      if (leftBound >= 0 && rightBound < COLS) {\r\n        win =\r\n          this.checkWinHelper(\r\n            board,\r\n            row,\r\n            leftBound,\r\n            false,\r\n            true,\r\n            false,\r\n            false\r\n          ) || win;\r\n      }\r\n\r\n      // Vertical, bottom to top\r\n      if (topBound >= 0 && bottomBound < ROWS) {\r\n        win =\r\n          this.checkWinHelper(\r\n            board,\r\n            topBound,\r\n            col,\r\n            true,\r\n            false,\r\n            false,\r\n            false\r\n          ) || win;\r\n      }\r\n\r\n      // Negative Diagonal, bottom right to top left\r\n      if (\r\n        leftBound >= 0 &&\r\n        rightBound < COLS &&\r\n        topBound >= 0 &&\r\n        bottomBound < ROWS\r\n      ) {\r\n        win =\r\n          this.checkWinHelper(\r\n            board,\r\n            topBound,\r\n            leftBound,\r\n            true,\r\n            true,\r\n            false,\r\n            false\r\n          ) || win;\r\n      }\r\n\r\n      // Positive Diagonal, bottom left to top right\r\n      const newLeftBound = col - CONSECUTIVE_TO_WIN + i + 1;\r\n      const newRightBound = col + i;\r\n      if (\r\n        newLeftBound >= 0 &&\r\n        newRightBound < COLS &&\r\n        topBound >= 0 &&\r\n        bottomBound < ROWS\r\n      ) {\r\n        win =\r\n          this.checkWinHelper(\r\n            board,\r\n            topBound,\r\n            newRightBound,\r\n            true,\r\n            true,\r\n            false,\r\n            true\r\n          ) || win;\r\n      }\r\n    }\r\n\r\n    return win;\r\n  };\r\n\r\n  checkWinHelper = (\r\n    board,\r\n    row,\r\n    col,\r\n    incrementRow,\r\n    incrementCol,\r\n    invertRow,\r\n    invertCol\r\n  ) => {\r\n    // Check if all discs by player\r\n    for (let offset = 0; offset < CONSECUTIVE_TO_WIN; offset++) {\r\n      const r = row + (incrementRow ? (invertRow ? -offset : offset) : 0);\r\n      const c = col + (incrementCol ? (invertCol ? -offset : offset) : 0);\r\n      if (board[r][c] !== this.state.curPlayer) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    // Add win class to style button\r\n    for (let offset = 0; offset < CONSECUTIVE_TO_WIN; offset++) {\r\n      const r = row + (incrementRow ? (invertRow ? -offset : offset) : 0);\r\n      const c = col + (incrementCol ? (invertCol ? -offset : offset) : 0);\r\n      const button = document.getElementById(`button-${r}-${c}`);\r\n      button.classList.add(\"win\");\r\n    }\r\n\r\n    return true;\r\n  };\r\n\r\n  runAI = () => {\r\n    // Only run AI if not game over\r\n    if (this.state.winner !== -1) {\r\n      if (SIMULATE) {\r\n        if (this.state.winner === 1) {\r\n          this.p1Wins++;\r\n        } else if (this.state.winner === 2) {\r\n          this.p2Wins++;\r\n        } else {\r\n          this.draws++;\r\n        }\r\n\r\n        this.matches--;\r\n\r\n        if (this.matches === 0) {\r\n          console.log(\r\n            `P1: ${this.p1Wins} | P2: ${this.p2Wins} | Draws: ${this.draws}`\r\n          );\r\n        } else {\r\n          this.setNewGame();\r\n        }\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    // Game not over\r\n    clearTimeout(this.timer);\r\n    this.timer = setTimeout(\r\n      () => {\r\n        if (this.state.curPlayer === 1 && this.state.p1 !== 0) {\r\n          // Run AI for player 1\r\n          if (this.state.p1 === 1) {\r\n            this.randomAI();\r\n          } else if (this.state.p1 === 2) {\r\n            this.minimaxAI(MINIMAX_DEPTH_1);\r\n          } else if (this.state.p1 === 3) {\r\n            this.minimaxAI(MINIMAX_DEPTH_2);\r\n          } else if (this.state.p1 === 4) {\r\n            this.qLearningAI();\r\n          } else if (this.state.p1 === 5) {\r\n            this.minimaxAI(MINIMAX_DEPTH_4);\r\n          } else if (this.state.p1 === 6) {\r\n            this.minimaxAI(MINIMAX_DEPTH_6);\r\n          }\r\n        } else if (this.state.curPlayer === 2 && this.state.p2 !== 0) {\r\n          // Run AI for player 2\r\n          if (this.state.p2 === 1) {\r\n            this.randomAI();\r\n          } else if (this.state.p2 === 2) {\r\n            this.minimaxAI(MINIMAX_DEPTH_1);\r\n          } else if (this.state.p2 === 3) {\r\n            this.minimaxAI(MINIMAX_DEPTH_2);\r\n          } else if (this.state.p2 === 4) {\r\n            this.qLearningAI();\r\n          } else if (this.state.p2 === 5) {\r\n            this.minimaxAI(MINIMAX_DEPTH_4);\r\n          } else if (this.state.p2 === 6) {\r\n            this.minimaxAI(MINIMAX_DEPTH_6);\r\n          }\r\n        }\r\n      },\r\n      SIMULATE ? 0 : AI_SPEED / this.state.aiSpeed\r\n    );\r\n  };\r\n\r\n  randomAI() {\r\n    const validMoves = this.getValidMoves(this.state.board);\r\n    const [_, col] = validMoves[Math.floor(Math.random() * validMoves.length)];\r\n    this.dropDisc(col);\r\n  }\r\n\r\n  minimaxAI(depth) {\r\n    let maxVal = Number.NEGATIVE_INFINITY;\r\n    let maxCols = [];\r\n    for (const [validRow, validCol] of this.getValidMoves(this.state.board)) {\r\n      const board = this.nextBoard(\r\n        validRow,\r\n        validCol,\r\n        this.state.board,\r\n        this.state.curPlayer\r\n      );\r\n      const val = this.minimax(\r\n        board,\r\n        depth - 1,\r\n        Number.NEGATIVE_INFINITY,\r\n        Number.POSITIVE_INFINITY,\r\n        false,\r\n        this.state.curPlayer\r\n      );\r\n      if (val > maxVal) {\r\n        // New max value\r\n        maxVal = val;\r\n\r\n        // New max columns array\r\n        maxCols = [validCol];\r\n      } else if (val === maxVal) {\r\n        // Same max value, add to array of possible choices\r\n        maxCols.push(validCol);\r\n      }\r\n    }\r\n    const randMaxCol = maxCols[Math.floor(Math.random() * maxCols.length)];\r\n    this.dropDisc(randMaxCol);\r\n  }\r\n\r\n  minimax(board, depth, alpha, beta, maximizingPlayer, player) {\r\n    // Game over when valid moves is empty\r\n    if (depth === 0 || this.isGameOver(board)) {\r\n      return this.getHeuristic(board, player);\r\n    }\r\n\r\n    if (maximizingPlayer) {\r\n      let maxVal = Number.NEGATIVE_INFINITY;\r\n      for (const [validRow, validCol] of this.getValidMoves(board)) {\r\n        const nextBoard = this.nextBoard(validRow, validCol, board, player);\r\n        const val = this.minimax(\r\n          nextBoard,\r\n          depth - 1,\r\n          alpha,\r\n          beta,\r\n          false,\r\n          player\r\n        );\r\n        maxVal = Math.max(maxVal, val);\r\n        alpha = Math.max(alpha, val);\r\n        if (alpha >= beta) {\r\n          break;\r\n        }\r\n      }\r\n      return maxVal;\r\n    } else {\r\n      let minVal = Number.POSITIVE_INFINITY;\r\n      for (const [validRow, validCol] of this.getValidMoves(board)) {\r\n        const nextBoard = this.nextBoard(\r\n          validRow,\r\n          validCol,\r\n          board,\r\n          (player % 2) + 1\r\n        );\r\n        const val = this.minimax(\r\n          nextBoard,\r\n          depth - 1,\r\n          alpha,\r\n          beta,\r\n          true,\r\n          player\r\n        );\r\n        minVal = Math.min(minVal, val);\r\n        beta = Math.min(beta, val);\r\n        if (beta <= alpha) {\r\n          break;\r\n        }\r\n      }\r\n      return minVal;\r\n    }\r\n  }\r\n\r\n  qLearningAI() {}\r\n\r\n  isGameOver(board) {\r\n    return (\r\n      this.countWindows(board, 1, CONSECUTIVE_TO_WIN) > 0 ||\r\n      this.countWindows(board, 2, CONSECUTIVE_TO_WIN) > 0 ||\r\n      this.isBoardFull(board)\r\n    );\r\n  }\r\n\r\n  isBoardFull(board) {\r\n    for (let col = 0; col < COLS; col++) {\r\n      if (board[0][col] === 0) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  getHeuristic(board, player) {\r\n    let weightedSum = 0;\r\n\r\n    // Weights increase alternatingly\r\n    /*\r\n        p1_4: 1e5\r\n        p1_3: 1e3\r\n        p1_2: 1e1\r\n        p2_2: -1e0\r\n        p2_3: -1e2\r\n        p2_4: -1e4\r\n     */\r\n    for (let i = 0; i < CONSECUTIVE_TO_WIN - 1; i++) {\r\n      // Positive\r\n      weightedSum +=\r\n        10 ** (2 * i + 1) * this.countWindows(board, player, i + 2);\r\n\r\n      // Negative\r\n      weightedSum -=\r\n        10 ** (2 * i) * this.countWindows(board, (player % 2) + 1, i + 2);\r\n    }\r\n\r\n    return weightedSum;\r\n  }\r\n\r\n  countWindows(board, player, targetCount) {\r\n    let count = 0;\r\n\r\n    // Horizontal\r\n    for (let row = 0; row < ROWS; row++) {\r\n      for (let col = 0; col < COLS - CONSECUTIVE_TO_WIN + 1; col++) {\r\n        let playerCount = 0;\r\n        let emptyCount = 0;\r\n\r\n        // Count number of player discs and empty spots\r\n        for (let i = 0; i < CONSECUTIVE_TO_WIN; i++) {\r\n          const val = board[row][col + i];\r\n\r\n          if (val === player) {\r\n            playerCount++;\r\n          } else if (val === 0) {\r\n            emptyCount++;\r\n          }\r\n        }\r\n\r\n        // Check if this window counts\r\n        if (\r\n          playerCount === targetCount &&\r\n          emptyCount === CONSECUTIVE_TO_WIN - playerCount\r\n        ) {\r\n          count++;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Vertical\r\n    for (let row = 0; row < ROWS - CONSECUTIVE_TO_WIN + 1; row++) {\r\n      for (let col = 0; col < COLS; col++) {\r\n        let playerCount = 0;\r\n        let emptyCount = 0;\r\n\r\n        // Count number of player discs and empty spots\r\n        for (let i = 0; i < CONSECUTIVE_TO_WIN; i++) {\r\n          const val = board[row + i][col];\r\n\r\n          if (val === player) {\r\n            playerCount++;\r\n          } else if (val === 0) {\r\n            emptyCount++;\r\n          }\r\n        }\r\n\r\n        // Check if this window counts\r\n        if (\r\n          playerCount === targetCount &&\r\n          emptyCount === CONSECUTIVE_TO_WIN - playerCount\r\n        ) {\r\n          count++;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Negative Diagonal\r\n    for (let row = 0; row < ROWS - CONSECUTIVE_TO_WIN + 1; row++) {\r\n      for (let col = 0; col < COLS - CONSECUTIVE_TO_WIN + 1; col++) {\r\n        let playerCount = 0;\r\n        let emptyCount = 0;\r\n\r\n        // Count number of player discs and empty spots\r\n        for (let i = 0; i < CONSECUTIVE_TO_WIN; i++) {\r\n          const val = board[row + i][col + i];\r\n\r\n          if (val === player) {\r\n            playerCount++;\r\n          } else if (val === 0) {\r\n            emptyCount++;\r\n          }\r\n        }\r\n\r\n        // Check if this window counts\r\n        if (\r\n          playerCount === targetCount &&\r\n          emptyCount === CONSECUTIVE_TO_WIN - playerCount\r\n        ) {\r\n          count++;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Positive Diagonal\r\n    for (let row = 0; row < ROWS - CONSECUTIVE_TO_WIN + 1; row++) {\r\n      for (let col = COLS - 1; col > CONSECUTIVE_TO_WIN - 2; col--) {\r\n        let playerCount = 0;\r\n        let emptyCount = 0;\r\n\r\n        // Count number of player discs and empty spots\r\n        for (let i = 0; i < CONSECUTIVE_TO_WIN; i++) {\r\n          const val = board[row + i][col - i];\r\n\r\n          if (val === player) {\r\n            playerCount++;\r\n          } else if (val === 0) {\r\n            emptyCount++;\r\n          }\r\n        }\r\n\r\n        // Check if this window counts\r\n        if (\r\n          playerCount === targetCount &&\r\n          emptyCount === CONSECUTIVE_TO_WIN - playerCount\r\n        ) {\r\n          count++;\r\n        }\r\n      }\r\n    }\r\n\r\n    return count;\r\n  }\r\n\r\n  getValidMoves(board) {\r\n    const validMoves = [];\r\n    for (let col = 0; col < COLS; col++) {\r\n      if (board[0][col] === 0) {\r\n        const row = this.getDropRow(board, col);\r\n        validMoves.push([row, col]);\r\n      }\r\n    }\r\n    return validMoves;\r\n  }\r\n\r\n  getDropRow(board, col) {\r\n    for (let row = ROWS - 1; row >= 0; row--) {\r\n      if (board[row][col] === 0) {\r\n        return row;\r\n      }\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  nextBoard(row, col, board, player) {\r\n    // Deep copy the board\r\n    const nextBoard = [];\r\n    for (const row of board) {\r\n      nextBoard.push(row.slice());\r\n    }\r\n\r\n    // Set the disc\r\n    nextBoard[row][col] = player;\r\n\r\n    return nextBoard;\r\n  }\r\n\r\n  render() {\r\n    let turnText;\r\n    if (this.state.winner !== -1) {\r\n      if (this.state.winner === 0) {\r\n        turnText = \"Draw\";\r\n      } else {\r\n        turnText = `Player ${this.state.winner} wins`;\r\n      }\r\n    } else {\r\n      turnText = `Player ${this.state.curPlayer} turn`;\r\n    }\r\n\r\n    return (\r\n      <div className=\"App container-fluid text-center pt-5\">\r\n        <div className=\"row\">\r\n          <div className=\"col\">\r\n            <Title text=\"Connect 4 AI\" />\r\n          </div>\r\n        </div>\r\n        <div className=\"row\">\r\n          <div className=\"col\">\r\n            <Description\r\n              text={\"Play versus Player/AI or watch AI play against AI.\"}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"row justify-content-center\">\r\n          <div className=\"col col-auto pt-3\">\r\n            <h4>Player 1</h4>\r\n            <Select\r\n              options={OPTIONS}\r\n              player={1}\r\n              onChange={(e) => this.selectPlayer(e, 1)}\r\n            />\r\n          </div>\r\n          <div className=\"col col-auto pt-3\">\r\n            <h4>Player 2</h4>\r\n            <Select\r\n              options={OPTIONS}\r\n              player={2}\r\n              onChange={(e) => this.selectPlayer(e, 2)}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"row justify-content-center pt-3\">\r\n          <div className=\"col col-10 col-sm-8 col-md-6 col-lg-4 col-xl-2\">\r\n            <RangeInput\r\n              min={0.01}\r\n              max={1}\r\n              step={0.01}\r\n              defaultValue={this.state.aiSpeed}\r\n              onChange={this.updateAISpeed}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"row\">\r\n          <div className=\"col\">\r\n            <Label text=\"AI speed\" value={this.state.aiSpeed} />\r\n          </div>\r\n        </div>\r\n        <div className=\"row justify-content-center pt-3\">\r\n          <div className=\"col\">\r\n            <Button value=\"New Game\" onClick={this.setNewGame} />\r\n          </div>\r\n        </div>\r\n        <div className=\"row justify-content-center\">\r\n          <div className=\"col col-auto pt-5\">\r\n            <h4>{turnText}</h4>\r\n          </div>\r\n        </div>\r\n        <div className=\"row justify-content-center pt-3\">\r\n          <div className=\"col col-auto\">\r\n            <Board ROWS={ROWS} COLS={COLS} onClick={this.handlePlayerClick} />\r\n          </div>\r\n        </div>\r\n        <GithubCorner\r\n          href=\"https://github.com/ryantran2165/connect4-ai\"\r\n          bannerColor=\"#222\"\r\n          octoColor=\"#7fffd4\"\r\n          target=\"_blank\"\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport \"./index.scss\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}