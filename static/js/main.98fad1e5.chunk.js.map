{"version":3,"sources":["components/title.js","components/description.js","components/button.js","components/board.js","components/select.js","components/range-input.js","components/label.js","App.js","serviceWorker.js","index.js"],"names":["Title","text","Description","split","map","index","Fragment","key","defaultProps","Button","value","onClick","className","type","e","target","blur","Board","ROWS","COLS","rows","r","cols","c","col","id","push","row","Select","options","player","onChange","option","RangeInput","min","max","step","defaultValue","Label","OPTIONS","App","props","selectPlayer","setState","p1","selectedIndex","runAI","p2","updateAISpeed","aiSpeed","Number","setNewGame","board","Array","fill","curPlayer","winner","button","document","getElementById","classList","contains","remove","handlePlayerClick","state","dropDisc","getDropRow","add","nextBoard","checkWin","isBoardFull","win","i","leftBound","rightBound","topBound","bottomBound","checkWinHelper","newRightBound","incrementRow","incrementCol","invertRow","invertCol","offset","clearTimeout","timer","setTimeout","randomAI","minimaxAI","neatAI","qlearningAI","tf","validMoves","this","getValidMoves","Math","floor","random","length","depth","maxVal","NEGATIVE_INFINITY","maxCols","validRow","validCol","val","minimax","POSITIVE_INFINITY","randMaxCol","alpha","beta","maximizingPlayer","isGameOver","getHeuristic","minVal","countWindows","weightedSum","CONSECUTIVE_TO_WIN","targetCount","count","playerCount","emptyCount","slice","turnText","href","bannerColor","octoColor","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.98fad1e5.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Title = ({ text }) => {\r\n  return <h1>{text}</h1>;\r\n};\r\n\r\nTitle.propTypes = {\r\n  text: PropTypes.string\r\n};\r\n\r\nexport default Title;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Description = ({ text }) => {\r\n  const addLineBreaks = string =>\r\n    string.split(\"\\n\").map((text, index) => (\r\n      <React.Fragment key={`${text}-${index}`}>\r\n        {text}\r\n        <br />\r\n      </React.Fragment>\r\n    ));\r\n\r\n  return <h5>{addLineBreaks(text)}</h5>;\r\n};\r\n\r\nDescription.defaultProps = {\r\n  text: \"Default description\"\r\n};\r\n\r\nDescription.propTypes = {\r\n  text: PropTypes.string\r\n};\r\n\r\nexport default Description;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Button = ({ value, onClick }) => {\r\n  const handleOnClick = (e) => {\r\n    e.target.blur();\r\n    onClick();\r\n  };\r\n\r\n  return (\r\n    <button\r\n      className=\"btn btn-primary btn-lg\"\r\n      type=\"button\"\r\n      onClick={handleOnClick}\r\n    >\r\n      {value}\r\n    </button>\r\n  );\r\n};\r\n\r\nButton.propTypes = {\r\n  value: PropTypes.string,\r\n  onClick: PropTypes.func,\r\n};\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\n\r\nconst Board = ({ ROWS, COLS, onClick }) => {\r\n  const rows = [];\r\n  for (let r = 0; r < ROWS; r++) {\r\n    const cols = [];\r\n    for (let c = 0; c < COLS; c++) {\r\n      const col = (\r\n        <td key={r + \"-\" + c}>\r\n          <button\r\n            type=\"button\"\r\n            className=\"board-button\"\r\n            id={`button-${r}-${c}`}\r\n            onClick={() => onClick(c)}\r\n          ></button>\r\n        </td>\r\n      );\r\n      cols.push(col);\r\n    }\r\n    const row = <tr key={r}>{cols}</tr>;\r\n    rows.push(row);\r\n  }\r\n  return (\r\n    <div className=\"table-responsive\">\r\n      <table className=\"table\">\r\n        <tbody>{rows}</tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n","import React from \"react\";\r\n\r\nconst Select = ({ options, player, onChange }) => {\r\n  return (\r\n    <select onChange={onChange}>\r\n      {options.map((option) => {\r\n        return <option key={`p${player}-${option}`}>{option}</option>;\r\n      })}\r\n    </select>\r\n  );\r\n};\r\n\r\nexport default Select;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst RangeInput = ({ min, max, step, defaultValue, id, onChange }) => {\r\n  return (\r\n    <input\r\n      type=\"range\"\r\n      min={min}\r\n      max={max}\r\n      step={step}\r\n      defaultValue={defaultValue}\r\n      id={id}\r\n      onChange={onChange}\r\n    />\r\n  );\r\n};\r\n\r\nRangeInput.defaultProps = {\r\n  min: 0,\r\n  max: 1,\r\n  step: 1,\r\n  defaultValue: 0,\r\n  id: \"\"\r\n};\r\n\r\nRangeInput.propTypes = {\r\n  min: PropTypes.number,\r\n  max: PropTypes.number,\r\n  step: PropTypes.number,\r\n  defaultValue: PropTypes.number,\r\n  id: PropTypes.string,\r\n  onChange: PropTypes.func.isRequired\r\n};\r\n\r\nexport default RangeInput;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Label = ({ text, value }) => {\r\n  return (\r\n    <h5 className=\"text-break\">\r\n      {text}: {value}\r\n    </h5>\r\n  );\r\n};\r\n\r\nLabel.defaultProps = {\r\n  text: \"\",\r\n  value: 0\r\n};\r\n\r\nLabel.propTypes = {\r\n  text: PropTypes.string,\r\n  value: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\r\n};\r\n\r\nexport default Label;\r\n","import React, { Component } from \"react\";\nimport Title from \"./components/title\";\nimport Description from \"./components/description\";\nimport Button from \"./components/button\";\nimport GithubCorner from \"react-github-corner\";\nimport Board from \"./components/board\";\nimport Select from \"./components/select\";\nimport RangeInput from \"./components/range-input\";\nimport Label from \"./components/label\";\nimport NeuralNetwork from \"./logic/neural-network\";\nimport GeneticAlgorithm from \"./logic/genetic-algorithm\";\nimport * as tf from \"@tensorflow/tfjs\";\n\nconst ROWS = 6;\nconst COLS = 7;\nconst CONSECUTIVE_TO_WIN = 4;\nconst OPTIONS = [\n  \"Player\",\n  \"Very easy (random)\",\n  \"Easy (1-step minimax)\",\n  \"(WIP) Normal (NEAT)\",\n  \"Hard (2-step minimax)\",\n  \"(WIP) Very hard (Q-learning)\",\n  \"Extreme (4-step minimax)\",\n  \"Insane (6-step minimax)\",\n];\nconst AI_SPEED = 100;\nconst MINIMAX_DEPTH_1 = 1;\nconst MINIMAX_DEPTH_2 = 2;\nconst MINIMAX_DEPTH_4 = 4;\nconst MINIMAX_DEPTH_6 = 6;\n\nconst SIMULATE = false;\nconst P1 = 1;\nconst P2 = 1;\nconst MATCHES = 20;\n\nconst NEAT = false;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      board: new Array(ROWS).fill(0).map(() => new Array(COLS).fill(0)),\n      curPlayer: 1,\n      winner: -1, // -1: game in progress, 0: draw, 1: player 1, 2: player 2\n      p1: 0,\n      p2: 0,\n      aiSpeed: 0.2,\n    };\n\n    tf.setBackend(\"cpu\");\n  }\n\n  componentDidMount() {\n    if (SIMULATE) {\n      this.matches = MATCHES;\n      this.p1Wins = 0;\n      this.p2Wins = 0;\n      this.draws = 0;\n      this.setState({ p1: P1, p2: P2 }, () => this.runAI());\n    }\n\n    if (NEAT) {\n      this.geneticAlgorithm = new GeneticAlgorithm(\n        30,\n        0.1,\n        30,\n        ROWS * COLS,\n        COLS\n      );\n      this.networkGenerator = this.geneticAlgorithm.nextGeneration();\n      this.neuralNetwork = this.networkGenerator.next().value;\n      this.setState({ p1: 4, p2: 2 }, () => this.runAI());\n    } else {\n      // this.neuralNetwork = new NeuralNetwork(model);\n    }\n  }\n\n  selectPlayer = (e, player) => {\n    if (player === 1) {\n      this.setState(\n        {\n          p1: e.target.selectedIndex,\n        },\n        () => this.runAI()\n      );\n    } else if (player === 2) {\n      this.setState(\n        {\n          p2: e.target.selectedIndex,\n        },\n        () => this.runAI()\n      );\n    }\n  };\n\n  updateAISpeed = (e) => {\n    this.setState(\n      {\n        aiSpeed: Number(e.target.value),\n      },\n      () => this.runAI()\n    );\n  };\n\n  setNewGame = () => {\n    // Reset board and choose random player to start\n    this.setState(\n      {\n        board: new Array(ROWS).fill(0).map(() => new Array(COLS).fill(0)),\n        curPlayer: 1,\n        winner: -1,\n      },\n      () => this.runAI()\n    );\n\n    // Reset board button styles\n    for (let row = 0; row < ROWS; row++) {\n      for (let col = 0; col < COLS; col++) {\n        const button = document.getElementById(`button-${row}-${col}`);\n        if (button.classList.contains(\"p1\")) {\n          button.classList.remove(\"p1\");\n        }\n        if (button.classList.contains(\"p2\")) {\n          button.classList.remove(\"p2\");\n        }\n        if (button.classList.contains(\"win\")) {\n          button.classList.remove(\"win\");\n        }\n      }\n    }\n  };\n\n  handlePlayerClick = (col) => {\n    // Don't allow player to drop disc when AI's turn\n    if (\n      (this.state.curPlayer === 1 && this.state.p1 === 0) ||\n      (this.state.curPlayer === 2 && this.state.p2 === 0)\n    ) {\n      this.dropDisc(col);\n    }\n  };\n\n  dropDisc = (col) => {\n    // Don't allow drop if game over\n    if (this.state.winner !== -1) {\n      return;\n    }\n\n    const row = this.getDropRow(this.state.board, col);\n\n    // Column is full\n    if (row === -1) {\n      return;\n    }\n\n    // Add player class to button to change style\n    const button = document.getElementById(`button-${row}-${col}`);\n    button.classList.add(`p${this.state.curPlayer}`);\n\n    // Copy board and drop disc\n    const board = this.nextBoard(\n      row,\n      col,\n      this.state.board,\n      this.state.curPlayer\n    );\n\n    // Win\n    let winner = -1;\n    if (this.checkWin(board, row, col)) {\n      winner = this.state.curPlayer;\n    } else if (this.isBoardFull(board)) {\n      // Draw\n      winner = 0;\n    }\n\n    // Update board and current player\n    this.setState(\n      {\n        board: board,\n        curPlayer: (this.state.curPlayer % 2) + 1,\n        winner: winner,\n      },\n      () => this.runAI()\n    );\n  };\n\n  checkWin = (board, row, col) => {\n    // 'win = checkWinHelper() || win' must be in that order or checkWinHelper() will not be called on all sliding windows\n    let win = false;\n\n    // Pivot on the placed disk\n    for (let i = 0; i < CONSECUTIVE_TO_WIN; i++) {\n      const leftBound = col - i;\n      const rightBound = col + CONSECUTIVE_TO_WIN - i - 1;\n      const topBound = row - i;\n      const bottomBound = row + CONSECUTIVE_TO_WIN - i - 1;\n\n      // Horizontal, right to left\n      if (leftBound >= 0 && rightBound < COLS) {\n        win =\n          this.checkWinHelper(\n            board,\n            row,\n            leftBound,\n            false,\n            true,\n            false,\n            false\n          ) || win;\n      }\n\n      // Vertical, bottom to top\n      if (topBound >= 0 && bottomBound < ROWS) {\n        win =\n          this.checkWinHelper(\n            board,\n            topBound,\n            col,\n            true,\n            false,\n            false,\n            false\n          ) || win;\n      }\n\n      // Negative Diagonal, bottom right to top left\n      if (\n        leftBound >= 0 &&\n        rightBound < COLS &&\n        topBound >= 0 &&\n        bottomBound < ROWS\n      ) {\n        win =\n          this.checkWinHelper(\n            board,\n            topBound,\n            leftBound,\n            true,\n            true,\n            false,\n            false\n          ) || win;\n      }\n\n      // Positive Diagonal, bottom left to top right\n      const newLeftBound = col - CONSECUTIVE_TO_WIN + i + 1;\n      const newRightBound = col + i;\n      if (\n        newLeftBound >= 0 &&\n        newRightBound < COLS &&\n        topBound >= 0 &&\n        bottomBound < ROWS\n      ) {\n        win =\n          this.checkWinHelper(\n            board,\n            topBound,\n            newRightBound,\n            true,\n            true,\n            false,\n            true\n          ) || win;\n      }\n    }\n\n    return win;\n  };\n\n  checkWinHelper = (\n    board,\n    row,\n    col,\n    incrementRow,\n    incrementCol,\n    invertRow,\n    invertCol\n  ) => {\n    // Check if all discs by player\n    for (let offset = 0; offset < CONSECUTIVE_TO_WIN; offset++) {\n      const r = row + (incrementRow ? (invertRow ? -offset : offset) : 0);\n      const c = col + (incrementCol ? (invertCol ? -offset : offset) : 0);\n      if (board[r][c] !== this.state.curPlayer) {\n        return false;\n      }\n    }\n\n    // Add win class to style button\n    for (let offset = 0; offset < CONSECUTIVE_TO_WIN; offset++) {\n      const r = row + (incrementRow ? (invertRow ? -offset : offset) : 0);\n      const c = col + (incrementCol ? (invertCol ? -offset : offset) : 0);\n      const button = document.getElementById(`button-${r}-${c}`);\n      if (!button.classList.contains(\"win\")) {\n        button.classList.add(\"win\");\n      }\n    }\n\n    return true;\n  };\n\n  runAI = () => {\n    // Only run AI if not game over\n    if (this.state.winner !== -1) {\n      if (SIMULATE) {\n        if (this.state.winner === 1) {\n          this.p1Wins++;\n        } else if (this.state.winner === 2) {\n          this.p2Wins++;\n        } else {\n          this.draws++;\n        }\n\n        this.matches--;\n\n        if (this.matches === 0) {\n          console.log(\n            `P1: ${this.p1Wins} | P2: ${this.p2Wins} | Draws: ${this.draws}`\n          );\n        } else {\n          this.setNewGame();\n        }\n      }\n\n      if (NEAT) {\n        const boardCopy = [];\n        for (const row of this.state.board) {\n          boardCopy.push(row.slice());\n        }\n        const fitness = Math.max(1e4 + this.getHeuristic(boardCopy, 1), 1);\n        this.neuralNetwork.setFitness(fitness);\n        // console.log(this.neuralNetwork, boardCopy);\n\n        // Get next network\n        this.neuralNetwork = this.networkGenerator.next().value;\n\n        if (this.neuralNetwork !== null) {\n          // Next network from same generation\n          this.setNewGame();\n        } else {\n          // Next generation\n          this.networkGenerator = this.geneticAlgorithm.nextGeneration();\n\n          if (this.networkGenerator !== null) {\n            // First network from new generation\n            this.neuralNetwork = this.networkGenerator.next().value;\n            this.setNewGame();\n          } else {\n            // All generations finished\n          }\n        }\n      }\n      return;\n    }\n\n    clearTimeout(this.timer);\n    this.timer = setTimeout(\n      () => {\n        if (this.state.curPlayer === 1 && this.state.p1 !== 0) {\n          // Run AI for player 1\n          if (this.state.p1 === 1) {\n            this.randomAI();\n          } else if (this.state.p1 === 2) {\n            this.minimaxAI(MINIMAX_DEPTH_1);\n          } else if (this.state.p1 === 3) {\n            this.neatAI();\n          } else if (this.state.p1 === 4) {\n            this.minimaxAI(MINIMAX_DEPTH_2);\n          } else if (this.state.p1 === 5) {\n            this.qlearningAI();\n          } else if (this.state.p1 === 6) {\n            this.minimaxAI(MINIMAX_DEPTH_4);\n          } else if (this.state.p1 === 7) {\n            this.minimaxAI(MINIMAX_DEPTH_6);\n          }\n        } else if (this.state.curPlayer === 2 && this.state.p2 !== 0) {\n          // Run AI for player 2\n          if (this.state.p2 === 1) {\n            this.randomAI();\n          } else if (this.state.p2 === 2) {\n            this.minimaxAI(MINIMAX_DEPTH_1);\n          } else if (this.state.p2 === 3) {\n            this.neatAI();\n          } else if (this.state.p2 === 4) {\n            this.minimaxAI(MINIMAX_DEPTH_2);\n          } else if (this.state.p2 === 5) {\n            this.qlearningAI();\n          } else if (this.state.p2 === 6) {\n            this.minimaxAI(MINIMAX_DEPTH_4);\n          } else if (this.state.p2 === 7) {\n            this.minimaxAI(MINIMAX_DEPTH_6);\n          }\n        }\n      },\n      SIMULATE || NEAT ? 0 : AI_SPEED / this.state.aiSpeed\n    );\n  };\n\n  randomAI() {\n    const validMoves = this.getValidMoves(this.state.board);\n    const [_, col] = validMoves[Math.floor(Math.random() * validMoves.length)];\n    this.dropDisc(col);\n  }\n\n  minimaxAI(depth) {\n    let maxVal = Number.NEGATIVE_INFINITY;\n    let maxCols = [];\n    for (const [validRow, validCol] of this.getValidMoves(this.state.board)) {\n      const board = this.nextBoard(\n        validRow,\n        validCol,\n        this.state.board,\n        this.state.curPlayer\n      );\n      const val = this.minimax(\n        board,\n        depth - 1,\n        Number.NEGATIVE_INFINITY,\n        Number.POSITIVE_INFINITY,\n        false,\n        this.state.curPlayer\n      );\n      if (val > maxVal) {\n        // New max value\n        maxVal = val;\n\n        // New max columns array\n        maxCols = [validCol];\n      } else if (val === maxVal) {\n        // Same max value, add to array of possible choices\n        maxCols.push(validCol);\n      }\n    }\n    const randMaxCol = maxCols[Math.floor(Math.random() * maxCols.length)];\n    this.dropDisc(randMaxCol);\n  }\n\n  minimax(board, depth, alpha, beta, maximizingPlayer, player) {\n    // Game over when valid moves is empty\n    if (depth === 0 || this.isGameOver(board)) {\n      return this.getHeuristic(board, player);\n    }\n\n    if (maximizingPlayer) {\n      let maxVal = Number.NEGATIVE_INFINITY;\n      for (const [validRow, validCol] of this.getValidMoves(board)) {\n        const nextBoard = this.nextBoard(validRow, validCol, board, player);\n        const val = this.minimax(\n          nextBoard,\n          depth - 1,\n          alpha,\n          beta,\n          false,\n          player\n        );\n        maxVal = Math.max(maxVal, val);\n        alpha = Math.max(alpha, val);\n        if (alpha >= beta) {\n          break;\n        }\n      }\n      return maxVal;\n    } else {\n      let minVal = Number.POSITIVE_INFINITY;\n      for (const [validRow, validCol] of this.getValidMoves(board)) {\n        const nextBoard = this.nextBoard(\n          validRow,\n          validCol,\n          board,\n          (player % 2) + 1\n        );\n        const val = this.minimax(\n          nextBoard,\n          depth - 1,\n          alpha,\n          beta,\n          true,\n          player\n        );\n        minVal = Math.min(minVal, val);\n        beta = Math.min(beta, val);\n        if (beta <= alpha) {\n          break;\n        }\n      }\n      return minVal;\n    }\n  }\n\n  neatAI() {\n    // // Flatten board\n    // const inputArr = [];\n    // for (let row = 0; row < ROWS; row++) {\n    //   for (let col = 0; col < COLS; col++) {\n    //     inputArr.push(this.state.board[row][col]);\n    //   }\n    // }\n    // // Get valid columns\n    // const validCols = [];\n    // for (const [validRow, validCol] of this.getValidMoves(this.state.board)) {\n    //   validCols.push(validCol);\n    // }\n    // // Network may choose invalid column, just choose by probabilities\n    // const outputArr = this.neuralNetwork.predict(inputArr);\n    // let col = outputArr.indexOf(Math.max(...outputArr));\n    // // Keep trying until get a valid move\n    // while (!validCols.includes(col)) {\n    //   outputArr[col] = -1;\n    //   col = outputArr.indexOf(Math.max(...outputArr));\n    // }\n    // this.dropDisc(col);\n  }\n\n  qlearningAI() {}\n\n  isGameOver(board) {\n    return (\n      this.countWindows(board, 1, CONSECUTIVE_TO_WIN) > 0 ||\n      this.countWindows(board, 2, CONSECUTIVE_TO_WIN) > 0 ||\n      this.isBoardFull(board)\n    );\n  }\n\n  isBoardFull(board) {\n    for (let col = 0; col < COLS; col++) {\n      if (board[0][col] === 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  getHeuristic(board, player) {\n    let weightedSum = 0;\n\n    // Weights increase alternatingly\n    /*\n        p1_4: 1e5\n        p1_3: 1e3\n        p1_2: 1e1\n        p2_2: -1e0\n        p2_3: -1e2\n        p2_4: -1e4\n     */\n    for (let i = 0; i < CONSECUTIVE_TO_WIN - 1; i++) {\n      // Positive\n      weightedSum +=\n        10 ** (2 * i + 1) * this.countWindows(board, player, i + 2);\n\n      // Negative\n      weightedSum -=\n        10 ** (2 * i) * this.countWindows(board, (player % 2) + 1, i + 2);\n    }\n\n    return weightedSum;\n  }\n\n  countWindows(board, player, targetCount) {\n    let count = 0;\n\n    // Horizontal\n    for (let row = 0; row < ROWS; row++) {\n      for (let col = 0; col < COLS - CONSECUTIVE_TO_WIN + 1; col++) {\n        let playerCount = 0;\n        let emptyCount = 0;\n\n        // Count number of player discs and empty spots\n        for (let i = 0; i < CONSECUTIVE_TO_WIN; i++) {\n          const val = board[row][col + i];\n\n          if (val === player) {\n            playerCount++;\n          } else if (val === 0) {\n            emptyCount++;\n          }\n        }\n\n        // Check if this window counts\n        if (\n          playerCount === targetCount &&\n          emptyCount === CONSECUTIVE_TO_WIN - playerCount\n        ) {\n          count++;\n        }\n      }\n    }\n\n    // Vertical\n    for (let row = 0; row < ROWS - CONSECUTIVE_TO_WIN + 1; row++) {\n      for (let col = 0; col < COLS; col++) {\n        let playerCount = 0;\n        let emptyCount = 0;\n\n        // Count number of player discs and empty spots\n        for (let i = 0; i < CONSECUTIVE_TO_WIN; i++) {\n          const val = board[row + i][col];\n\n          if (val === player) {\n            playerCount++;\n          } else if (val === 0) {\n            emptyCount++;\n          }\n        }\n\n        // Check if this window counts\n        if (\n          playerCount === targetCount &&\n          emptyCount === CONSECUTIVE_TO_WIN - playerCount\n        ) {\n          count++;\n        }\n      }\n    }\n\n    // Negative Diagonal\n    for (let row = 0; row < ROWS - CONSECUTIVE_TO_WIN + 1; row++) {\n      for (let col = 0; col < COLS - CONSECUTIVE_TO_WIN + 1; col++) {\n        let playerCount = 0;\n        let emptyCount = 0;\n\n        // Count number of player discs and empty spots\n        for (let i = 0; i < CONSECUTIVE_TO_WIN; i++) {\n          const val = board[row + i][col + i];\n\n          if (val === player) {\n            playerCount++;\n          } else if (val === 0) {\n            emptyCount++;\n          }\n        }\n\n        // Check if this window counts\n        if (\n          playerCount === targetCount &&\n          emptyCount === CONSECUTIVE_TO_WIN - playerCount\n        ) {\n          count++;\n        }\n      }\n    }\n\n    // Positive Diagonal\n    for (let row = 0; row < ROWS - CONSECUTIVE_TO_WIN + 1; row++) {\n      for (let col = COLS - 1; col > CONSECUTIVE_TO_WIN - 2; col--) {\n        let playerCount = 0;\n        let emptyCount = 0;\n\n        // Count number of player discs and empty spots\n        for (let i = 0; i < CONSECUTIVE_TO_WIN; i++) {\n          const val = board[row + i][col - i];\n\n          if (val === player) {\n            playerCount++;\n          } else if (val === 0) {\n            emptyCount++;\n          }\n        }\n\n        // Check if this window counts\n        if (\n          playerCount === targetCount &&\n          emptyCount === CONSECUTIVE_TO_WIN - playerCount\n        ) {\n          count++;\n        }\n      }\n    }\n\n    return count;\n  }\n\n  getValidMoves(board) {\n    const validMoves = [];\n    for (let col = 0; col < COLS; col++) {\n      if (board[0][col] === 0) {\n        const row = this.getDropRow(board, col);\n        validMoves.push([row, col]);\n      }\n    }\n    return validMoves;\n  }\n\n  getDropRow(board, col) {\n    for (let row = ROWS - 1; row >= 0; row--) {\n      if (board[row][col] === 0) {\n        return row;\n      }\n    }\n    return -1;\n  }\n\n  nextBoard(row, col, board, player) {\n    // Deep copy the board\n    const nextBoard = [];\n    for (const row of board) {\n      nextBoard.push(row.slice());\n    }\n\n    // Set the disc\n    nextBoard[row][col] = player;\n\n    return nextBoard;\n  }\n\n  render() {\n    let turnText;\n    if (this.state.winner !== -1) {\n      if (this.state.winner === 0) {\n        turnText = \"Draw\";\n      } else {\n        turnText = `Player ${this.state.winner} wins`;\n      }\n    } else {\n      turnText = `Player ${this.state.curPlayer} turn`;\n    }\n\n    return (\n      <div className=\"App container-fluid text-center pt-5\">\n        <div className=\"row\">\n          <div className=\"col\">\n            <Title text=\"Connect 4 AI\" />\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col\">\n            <Description\n              text={\"Play versus Player/AI or watch AI play against AI.\"}\n            />\n          </div>\n        </div>\n        <div className=\"row justify-content-center\">\n          <div className=\"col col-auto pt-3\">\n            <h4>Player 1</h4>\n            <Select\n              options={OPTIONS}\n              player={1}\n              onChange={(e) => this.selectPlayer(e, 1)}\n            />\n          </div>\n          <div className=\"col col-auto pt-3\">\n            <h4>Player 2</h4>\n            <Select\n              options={OPTIONS}\n              player={2}\n              onChange={(e) => this.selectPlayer(e, 2)}\n            />\n          </div>\n        </div>\n        <div className=\"row justify-content-center pt-3\">\n          <div className=\"col col-10 col-sm-8 col-md-6 col-lg-4 col-xl-2\">\n            <RangeInput\n              min={0.01}\n              max={1}\n              step={0.01}\n              defaultValue={this.state.aiSpeed}\n              onChange={this.updateAISpeed}\n            />\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col\">\n            <Label text=\"AI speed\" value={this.state.aiSpeed} />\n          </div>\n        </div>\n        <div className=\"row justify-content-center pt-3\">\n          <div className=\"col\">\n            <Button value=\"New Game\" onClick={this.setNewGame} />\n          </div>\n        </div>\n        <div className=\"row justify-content-center\">\n          <div className=\"col col-auto pt-5\">\n            <h4>{turnText}</h4>\n          </div>\n        </div>\n        <div className=\"row justify-content-center pt-3\">\n          <div className=\"col col-auto\">\n            <Board ROWS={ROWS} COLS={COLS} onClick={this.handlePlayerClick} />\n          </div>\n        </div>\n        <GithubCorner\n          href=\"https://github.com/ryantran2165/connect4-ai\"\n          bannerColor=\"#222\"\n          octoColor=\"#7fffd4\"\n          target=\"_blank\"\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./index.scss\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}